@extends('layouts.app')
@section('content')
    <div class="container my-5">
        <h4 class="text-center mb-4">ƒêi·ªÅn t·ª´</h4>
        <div class="d-flex justify-content-center mb-3">
            <button id="play-sound" class="btn btn-link">
                <img src="https://img.icons8.com/ios-filled/50/000000/speaker.png" alt="Play Sound" style="width: 24px; height: 24px;">
            </button>
        </div>
        <div id="card-container" class="text-center mb-4">
            <!-- N·ªôi dung c√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c render t·∫°i ƒë√¢y b·∫±ng JavaScript -->
        </div>
        <div class="d-flex justify-content-center">
            <input id="answer-input" type="text" class="form-control text-center" style="width: 200px;" placeholder="Nh·∫≠p t·ª´ v√†o ƒë√¢y">
        </div>
        <div class="text-center mt-4">
            <button id="check-answer" class="btn btn-primary me-2">Ki·ªÉm tra</button>
            <button id="next-question" class="btn btn-secondary" disabled>Ti·∫øp theo</button>
        </div>
        <p id="feedback" class="text-center mt-3"></p>
    </div>

    <script>
        const vocabularys = @json($vocabularys);

        let currentQuestionIndex = 0;

        // H√†m render c√¢u h·ªèi
        function renderQuestion() {
            const currentWord = vocabularys[currentQuestionIndex];
            const revealedLetters = getRevealedLetters(currentWord.word); // L·∫•y t·ª´ v·ªõi c√°c ch·ªØ c√°i ƒë√£ ti·∫øt l·ªô
            const wordMeaning = currentWord.meaning;

            // Render c√¢u h·ªèi
            const cardContainer = document.getElementById('card-container');
            cardContainer.innerHTML = `
                <p><strong>${wordMeaning}</strong></p>
                <div class="d-flex justify-content-center">
                    ${revealedLetters}
                </div>
            `;

            // Reset input v√† feedback
            document.getElementById('answer-input').value = '';
            document.getElementById('feedback').textContent = '';
            document.getElementById('next-question').disabled = true;
            document.getElementById('play-sound').onclick = () => {
                speak(currentWord.word);
            };
        }

        function speak(text) {
            const msg = new SpeechSynthesisUtterance();
            msg.text = text;
            msg.lang = 'en-US';
            window.speechSynthesis.speak(msg);
        }

        // H√†m t·∫°o t·ª´ v·ªõi c√°c ch·ªØ c√°i ƒë√£ ti·∫øt l·ªô
        function getRevealedLetters(word) {
            const firstLetter = word[0];
            const lastLetter = word[word.length - 1];
            let revealed = `<span class="revealed-letter">${firstLetter}</span>`;
            for (let i = 1; i < word.length - 1; i++) {
                revealed += `<span class="blank">_</span>`;
            }
            revealed += `<span class="revealed-letter">${lastLetter}</span>`;
            return revealed;
        }

        // H√†m ki·ªÉm tra ƒë√°p √°n
        document.getElementById('check-answer').addEventListener('click', function () {
            const userAnswer = document.getElementById('answer-input').value.trim().toLowerCase();
            const correctAnswer = vocabularys[currentQuestionIndex].word.toLowerCase();
            const feedback = document.getElementById('feedback');

            if (userAnswer === correctAnswer) {
                feedback.textContent = "Ch√≠nh x√°c! üéâ";
                feedback.classList.add('text-success');
                feedback.classList.remove('text-danger');
                document.getElementById('next-question').disabled = false;
            } else {
                feedback.textContent = "Sai r·ªìi. H√£y th·ª≠ l·∫°i! üò¢";
                feedback.classList.add('text-danger');
                feedback.classList.remove('text-success');
            }
        });

        // H√†m chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
        document.getElementById('next-question').addEventListener('click', function () {
            if (currentQuestionIndex < vocabularys.length - 1) {
                currentQuestionIndex++;
                renderQuestion();
            } else {
                alert("B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c c√¢u h·ªèi!");
            }
        });

        // Kh·ªüi t·∫°o c√¢u h·ªèi ƒë·∫ßu ti√™n
        renderQuestion();
    </script>

    <style>
        .revealed-letter {
            font-weight: bold;
            font-size: 1.5rem;
            margin: 0 5px;
        }
        .blank {
            font-size: 1.5rem;
            margin: 0 5px;
            border-bottom: 2px solid #ccc;
            display: inline-block;
            width: 20px;
            text-align: center;
        }
    </style>
@endsection
